# Warning: This docker-compose file is made for development purposes.
# Using it will build an image from the locally cloned repository.
#
# If you want to use Invidious in production, see the docker-compose.yml file provided
# in the installation documentation: https://docs.invidious.io/installation/

version: "3"
services:

  invidious:
    build:
      context: .
      dockerfile: docker/Dockerfile
    restart: unless-stopped
    environment:
      INVIDIOUS_CONFIG: |
        db:
          dbname: ${POSTGRES_DB}
          user: ${POSTGRES_USER}
          password: ${POSTGRES_PASSWORD}
          host: invidious-db
          port: 5432
        check_tables: true
        hmac_key: ${HMAC_KEY}
        domain: ${DOMAIN}
        https_only: true
        hsts: true
        use_pubsub_feeds: true
        statistics_enabled: true
        pool_size: 100
        registration_enabled: ${REGISTRATION_ENABLED:-false}
        login_enabled: ${LOGIN_ENABLED:-true}
        captcha_enabled: ${CAPTCHA_ENABLED:-true}
        po_token: ${PO_TOKEN}
        visitor_data: ${VISITOR_DATA}
        default_user_preferences:
          locale: ${DEFAULT_LOCALE:-"en-US"}
          region: ${DEFAULT_REGION:-"US"}
          dark_mode: "auto"
          thin_mode: false
          feed_menu: ["Popular", "Trending", "Subscriptions", "Playlists"]
          default_home: "Popular"
          max_results: 40
          quality: "hd720"
          volume: 100
        channel_threads: 2
        feed_threads: 2
        channel_refresh_interval: 30m
        full_refresh: false
    healthcheck:
      test: wget -nv --tries=1 --spider http://127.0.0.1:3000/api/v1/trending || exit 1
      interval: 30s
      timeout: 5s
      retries: 2
    depends_on:
      - invidious-db

  invidious-db:
    image: docker.io/library/postgres:14
    restart: unless-stopped
    volumes:
      - postgresdata:/var/lib/postgresql/data
      - ./config/sql:/config/sql
      - ./docker/init-invidious-db.sh:/docker-entrypoint-initdb.d/init-invidious-db.sh
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]

volumes:
  postgresdata:
